name: ü©∑ Claude Python Keyword Checker

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-py-files:
    name: "Check new Python files can run"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Find new Python files and check syntax
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking Python syntax for new files..."

          PR_NUMBER=${{ github.event.pull_request.number }}
          NEW_FILES=$(gh pr view "$PR_NUMBER" --json files -q '.files[] | select(.status=="added") | .path' | grep '\.py$' || true)

          if [ -z "$NEW_FILES" ]; then
            echo "‚úÖ No new Python files to check."
            exit 0
          fi

          echo "üß™ Checking the following files:"
          echo "$NEW_FILES"

          for file in $NEW_FILES; do
            python3 -m py_compile "$file" || {
              echo "‚ùå Syntax error in $file"
              exit 1
            }
          done

          echo "‚úÖ All new Python files passed syntax check."

  check-commit-author:
    name: "Check for consecutive commit authors"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Load CODEOWNERS accounts
        id: load_codeowners
        run: |
          CODEOWNERS_FILE="./CODEOWNERS"
          if [ -f "$CODEOWNERS_FILE" ]; then
            OWNERS=$(grep -o '@[a-zA-Z0-9_\-./]*' "$CODEOWNERS_FILE" | sed 's/@//g' | sort -u)
          else
            OWNERS=""
          fi
          echo "owners=$OWNERS" >> "$GITHUB_OUTPUT"
          echo "ÈÅãÂñ∂„Ç¢„Ç´„Ç¶„É≥„Éà: $OWNERS"

      - name: Check authors using gh api
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          OWNER=${{ github.repository_owner }}
          REPO=$(basename "${{ github.repository }}")

          # „Ç≥„Éü„ÉÉ„Éà author „ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó
          authors=$(gh api graphql -f query='
            query($owner:String!, $repo:String!, $number:Int!) {
              repository(owner:$owner, name:$repo) {
                pullRequest(number:$number) {
                  commits(first:100) {
                    nodes {
                      commit {
                        author {
                          name
                          user { login }
                        }
                      }
                    }
                  }
                }
              }
            }' \
          -f owner="$OWNER" -f repo="$REPO" -F number="$PR_NUMBER" \
          --jq '.data.repository.pullRequest.commits.nodes[].commit.author.user.login')

          echo "üîç Commit authors:"
          echo "$authors"

          # Èô§Â§ñÂØæË±°
          BOT_USERS=("dependabot[bot]" "github-actions[bot]")
          CODEOWNERS=(${{ steps.load_codeowners.outputs.owners }})

          prev=""
          duplicated=""

          while read author; do
            skip="false"
            for bot in "${BOT_USERS[@]}"; do
              [ "$author" = "$bot" ] && skip="true"
            done
            for owner in "${CODEOWNERS[@]}"; do
              [ "$author" = "$owner" ] && skip="true"
            done
            [ "$skip" = "true" ] && continue

            if [ "$author" = "$prev" ]; then
              duplicated="$author"
              break
            fi
            prev="$author"
          done <<< "$authors"

          if [ -n "$duplicated" ]; then
            echo "‚ùå Âêå„Åò author.nameÔºà$duplicatedÔºâ„ÅåÈÄ£Á∂ö„Åß„Ç≥„Éü„ÉÉ„Éà„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ"
            MESSAGE="‚ùå **${duplicated}** „ÅåÈÄ£Á∂ö„Ç≥„Éü„ÉÉ„Éà‰∏≠„ÄÇÈÅãÂñ∂„ÇÑbot‰ª•Â§ñ„ÅÆ‰∫∫„ÅØÊ≥®ÊÑèÔºÅ"
            gh pr comment "$PR_NUMBER" --body "$MESSAGE" --repo "$OWNER/$REPO"
            exit 1
          fi

          echo "‚úÖ OK: ÈáçË§á author.name „ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"

  review-via-claude:
    name: "AI Keyword Check via Claude Code"
    needs: [check-py-files, check-commit-author]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trigger Claude review
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: "./claude_prompt.txt"
          allowed_tools: "GlobTool,Bash,View,Write,Read,Edit"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

  fail-on-error:
    name: "Fail on ‚ùå in latest comment"
    needs: review-via-claude
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for ‚ùå in latest PR comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest=$(gh pr view ${{ github.event.pull_request.number }} --json comments -q ".comments[-1].body")
          echo "$latest" | grep -q "‚ùå" && exit 1 || exit 0
